{"name": "test_interval", "status": "broken", "statusDetails": {"message": "socket.timeout: timed out", "trace": "self = <class 'test_loop.Test_loop'>\n\n    def setup_class(self):\n        self.p1 = Test_loop1(\"192.168.7.122\",\"23\",\"admin\",\"admin\")\n        #self.p2 = Mtime()\n>       self.p1.tel_main()\n\ntest_loop.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlogin.py:36: in tel_main\n    self.tn = telnetlib.Telnet(self.ip,self.port,timeout=10)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\telnetlib.py:218: in __init__\n    self.open(host, port, timeout)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\telnetlib.py:235: in open\n    self.sock = socket.create_connection((host, port), timeout)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\socket.py:844: in create_connection\n    raise err\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('192.168.7.122', '23'), timeout = 10, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               socket.timeout: timed out\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\socket.py:832: timeout"}, "start": 1677463045043, "stop": 1677463045043, "uuid": "19a0c8df-a816-4609-a33e-d845fe8458cf", "historyId": "88f5cce52f55f0b4eb23a8e437e5cb47", "testCaseId": "3736c5bb2306406b7c7a8518be05d3d1", "fullName": "test_loop.Test_loop#test_interval", "labels": [{"name": "suite", "value": "test_loop"}, {"name": "subSuite", "value": "Test_loop"}, {"name": "host", "value": "WINDOWS-LL6NE6T"}, {"name": "thread", "value": "13296-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_loop"}]}