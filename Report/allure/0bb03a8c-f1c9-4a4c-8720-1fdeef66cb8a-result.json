{"name": "test_dechance", "status": "broken", "statusDetails": {"message": "socket.timeout: timed out", "trace": "self = <class 'test_upgrade.Test_Check1'>\n\n    def setup_class(self):\n        # self.p1 = Test_Check(\"172.16.160.1\",\"23\",\"admin\",\"admin\")\n        self.p1 = Test_Check(\"172.16.110.88\",\"23\",\"admin\",\"admin\")\n    \n>       self.p1.tel_main()\n\ntest_upgrade.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nlogin.py:36: in tel_main\n    self.tn = telnetlib.Telnet(self.ip,self.port,timeout=10)\nD:\\python 3.8.7\\lib\\telnetlib.py:218: in __init__\n    self.open(host, port, timeout)\nD:\\python 3.8.7\\lib\\telnetlib.py:235: in open\n    self.sock = socket.create_connection((host, port), timeout)\nD:\\python 3.8.7\\lib\\socket.py:808: in create_connection\n    raise err\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('172.16.110.88', '23'), timeout = 10, source_address = None\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               socket.timeout: timed out\n\nD:\\python 3.8.7\\lib\\socket.py:796: timeout"}, "start": 1687690261272, "stop": 1687690261272, "uuid": "75d98bb8-393b-4523-89f4-597e203adf21", "historyId": "eb60d36b09178c471ac4773dcae50ae6", "testCaseId": "eb60d36b09178c471ac4773dcae50ae6", "fullName": "test_upgrade.Test_Check1#test_dechance", "labels": [{"name": "suite", "value": "test_upgrade"}, {"name": "subSuite", "value": "Test_Check1"}, {"name": "host", "value": "l29707B"}, {"name": "thread", "value": "9768-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_upgrade"}]}